<!-- Reset Password Modal -->
<div
  class="modal fade"
  id="resetPasswordModal"
  tabindex="-1"
  aria-labelledby="resetPasswordModalLabel"
  aria-hidden="true"
>
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="resetPasswordModalLabel">Reset Password</h5>
        <button
          type="button"
          class="btn-close btn-close-white"
          data-bs-dismiss="modal"
          aria-label="Close"
        ></button>
      </div>
      <div class="modal-body">
        <form
          id="resetPasswordForm"
          action="/api/auth/reset-password"
          method="POST"
        >
          <!-- Reset Token -->
          <div class="form-floating mb-3">
            <input
              type="text"
              class="form-control"
              id="resetToken"
              name="token"
              placeholder="Reset token"
              required
            />
            <label for="resetToken">Reset Token</label>
            <div class="invalid-feedback">
              Please enter the reset token from your email.
            </div>
          </div>

          <!-- New Password -->
          <div class="form-floating mb-3 password-wrapper">
            <input
              type="password"
              class="form-control"
              id="newPassword"
              name="password"
              placeholder="New password"
              required
              minlength="8"
            />
            <label for="newPassword">New Password</label>
            <span class="password-toggle" id="newPasswordToggle">
              <i class="fas fa-eye"></i>
            </span>
            <div class="invalid-feedback">
              Password must be at least 8 characters.
            </div>
          </div>

          <!-- Confirm Password -->
          <div class="form-floating mb-3 password-wrapper">
            <input
              type="password"
              class="form-control"
              id="confirmPassword"
              name="confirmPassword"
              placeholder="Confirm password"
              required
            />
            <label for="confirmPassword">Confirm Password</label>
            <span class="password-toggle" id="confirmPasswordToggle">
              <i class="fas fa-eye"></i>
            </span>
            <div class="invalid-feedback">Passwords must match.</div>
          </div>

          <!-- Password Strength Meter -->
          <div class="mb-3">
            <div class="progress">
              <div
                id="resetPasswordStrength"
                class="progress-bar"
                role="progressbar"
                style="width: 0%"
                aria-valuenow="0"
                aria-valuemin="0"
                aria-valuemax="100"
              ></div>
            </div>
            <small id="resetPasswordStrengthText" class="form-text text-muted">
              Password strength
            </small>
          </div>

          <!-- Reset Password Status Alert -->
          <div
            id="resetPasswordStatus"
            class="alert d-none mb-3"
            role="alert"
          ></div>

          <!-- Submit Button -->
          <button
            type="submit"
            class="btn btn-primary w-100 mb-3"
            id="resetPasswordButton"
          >
            <i class="fas fa-lock me-2"></i>Reset Password
          </button>
        </form>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    // Password toggle for new password
    const newPasswordToggle = document.getElementById("newPasswordToggle");
    if (newPasswordToggle) {
      newPasswordToggle.addEventListener("click", function () {
        const passwordInput = document.getElementById("newPassword");
        const eyeIcon = this.querySelector("i");

        if (passwordInput.type === "password") {
          passwordInput.type = "text";
          eyeIcon.classList.remove("fa-eye");
          eyeIcon.classList.add("fa-eye-slash");
        } else {
          passwordInput.type = "password";
          eyeIcon.classList.remove("fa-eye-slash");
          eyeIcon.classList.add("fa-eye");
        }
      });
    }

    // Password toggle for confirm password
    const confirmPasswordToggle = document.getElementById(
      "confirmPasswordToggle"
    );
    if (confirmPasswordToggle) {
      confirmPasswordToggle.addEventListener("click", function () {
        const passwordInput = document.getElementById("confirmPassword");
        const eyeIcon = this.querySelector("i");

        if (passwordInput.type === "password") {
          passwordInput.type = "text";
          eyeIcon.classList.remove("fa-eye");
          eyeIcon.classList.add("fa-eye-slash");
        } else {
          passwordInput.type = "password";
          eyeIcon.classList.remove("fa-eye-slash");
          eyeIcon.classList.add("fa-eye");
        }
      });
    }

    // Password strength meter for reset password form
    const newPassword = document.getElementById("newPassword");
    const resetPasswordStrength = document.getElementById(
      "resetPasswordStrength"
    );
    const resetPasswordStrengthText = document.getElementById(
      "resetPasswordStrengthText"
    );

    if (newPassword && resetPasswordStrength && resetPasswordStrengthText) {
      newPassword.addEventListener("input", function () {
        const password = this.value;
        let strength = 0;
        let tips = [];

        // Length
        if (password.length >= 8) {
          strength += 25;
        } else {
          tips.push("at least 8 characters");
        }

        // Uppercase
        if (/[A-Z]/.test(password)) {
          strength += 25;
        } else {
          tips.push("uppercase letter");
        }

        // Lowercase
        if (/[a-z]/.test(password)) {
          strength += 25;
        } else {
          tips.push("lowercase letter");
        }

        // Numbers or special chars
        if (/[0-9!@#$%^&*]/.test(password)) {
          strength += 25;
        } else {
          tips.push("number or special character");
        }

        // Update progress bar
        resetPasswordStrength.style.width = strength + "%";

        // Update text and color based on strength
        if (strength <= 25) {
          resetPasswordStrength.className = "progress-bar bg-danger";
          resetPasswordStrengthText.textContent = "Weak password";
        } else if (strength <= 50) {
          resetPasswordStrength.className = "progress-bar bg-warning";
          resetPasswordStrengthText.textContent = "Fair password";
        } else if (strength <= 75) {
          resetPasswordStrength.className = "progress-bar bg-info";
          resetPasswordStrengthText.textContent = "Good password";
        } else {
          resetPasswordStrength.className = "progress-bar bg-success";
          resetPasswordStrengthText.textContent = "Strong password";
        }

        // Add tips if needed
        if (tips.length > 0) {
          resetPasswordStrengthText.textContent += ". Add: " + tips.join(", ");
        }
      });
    }

    // Password confirmation validation
    const confirmPassword = document.getElementById("confirmPassword");
    if (newPassword && confirmPassword) {
      function validatePasswordMatch() {
        if (confirmPassword.value === newPassword.value) {
          confirmPassword.setCustomValidity("");
          confirmPassword.classList.remove("is-invalid");
        } else {
          confirmPassword.setCustomValidity("Passwords must match");
          confirmPassword.classList.add("is-invalid");
        }
      }

      newPassword.addEventListener("input", validatePasswordMatch);
      confirmPassword.addEventListener("input", validatePasswordMatch);
    }

    // AJAX form submission for reset password form
    const resetPasswordForm = document.getElementById("resetPasswordForm");
    if (resetPasswordForm) {
      resetPasswordForm.addEventListener("submit", async function (e) {
        e.preventDefault();

        if (!this.checkValidity()) {
          e.stopPropagation();

          // Add validation classes to form fields
          const formInputs = this.querySelectorAll("input[required]");
          formInputs.forEach((input) => {
            if (!input.checkValidity()) {
              input.classList.add("is-invalid");
            } else {
              input.classList.remove("is-invalid");
            }
          });

          return;
        }

        // Validate passwords match
        if (newPassword.value !== confirmPassword.value) {
          confirmPassword.setCustomValidity("Passwords must match");
          confirmPassword.classList.add("is-invalid");
          return;
        }

        // Get form data
        const formData = new FormData(resetPasswordForm);
        const resetPasswordData = {
          token: formData.get("token"),
          password: formData.get("password"),
        };

        // Update button state
        const resetPasswordButton = document.getElementById(
          "resetPasswordButton"
        );
        const originalButtonText = resetPasswordButton.innerHTML;
        resetPasswordButton.disabled = true;
        resetPasswordButton.innerHTML =
          '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Resetting...';

        // Update status
        const resetPasswordStatus = document.getElementById(
          "resetPasswordStatus"
        );
        resetPasswordStatus.className = "alert alert-info d-block mb-3";
        resetPasswordStatus.textContent = "Resetting your password...";

        try {
          // Send reset password request
          const response = await fetch("/api/auth/reset-password", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              Accept: "application/json",
            },
            body: JSON.stringify(resetPasswordData),
          });

          const data = await response.json();

          // Show response in API response area
          const responseContainer = document.getElementById("test-response");
          if (responseContainer) {
            responseContainer.innerHTML = `
              <p class="mb-2"><strong>URL:</strong> /api/auth/reset-password</p>
              <p class="mb-2"><strong>Method:</strong> POST</p>
              <p class="mb-2"><strong>Status:</strong> ${response.status} ${
              response.statusText
            }</p>
              <p class="mb-2"><strong>Response:</strong></p>
              <pre>${JSON.stringify(data, null, 2)}</pre>
            `;
          }

          // Handle response
          if (response.ok && data.success) {
            // Success case
            resetPasswordStatus.className = "alert alert-success d-block mb-3";
            resetPasswordStatus.innerHTML =
              '<i class="fas fa-check-circle me-2"></i> ' +
              (data.message ||
                "Password reset successful. You can now login with your new password.");

            // Clear the form
            resetPasswordForm.reset();
            resetPasswordStrength.style.width = "0%";
            resetPasswordStrength.className = "progress-bar";
            resetPasswordStrengthText.textContent = "Password strength";

            // Add a login button
            const loginButton = document.createElement("button");
            loginButton.type = "button";
            loginButton.className = "btn btn-primary btn-sm mt-2";
            loginButton.innerHTML =
              '<i class="fas fa-sign-in-alt me-2"></i>Login Now';
            loginButton.onclick = function () {
              // Hide this modal
              const resetModal = bootstrap.Modal.getInstance(
                document.getElementById("resetPasswordModal")
              );
              if (resetModal) {
                resetModal.hide();
              }

              // Show login modal
              setTimeout(() => {
                const loginModal = new bootstrap.Modal(
                  document.getElementById("loginModal")
                );
                loginModal.show();
              }, 500);
            };

            resetPasswordStatus.appendChild(document.createElement("br"));
            resetPasswordStatus.appendChild(loginButton);

            // Disable the button permanently for this session
            resetPasswordButton.disabled = true;
          } else {
            // Error case
            resetPasswordStatus.className = "alert alert-danger d-block mb-3";
            resetPasswordStatus.innerHTML = `<i class="fas fa-exclamation-circle me-2"></i> ${
              data.message || "Failed to reset password"
            }`;
            resetPasswordButton.disabled = false;
            resetPasswordButton.innerHTML = originalButtonText;
          }
        } catch (error) {
          // Network error case
          resetPasswordStatus.className = "alert alert-danger d-block mb-3";
          resetPasswordStatus.innerHTML = `<i class="fas fa-exclamation-circle me-2"></i> ${
            error.message || "Network error occurred"
          }`;
          resetPasswordButton.disabled = false;
          resetPasswordButton.innerHTML = originalButtonText;
        }
      });
    }

    // Check for token in URL params
    const urlParams = new URLSearchParams(window.location.search);
    const token = urlParams.get("token");
    if (token) {
      document.getElementById("resetToken").value = token;
    }
  });
</script>
